{"version":3,"sources":["../../src/modules/downloadIcons.js"],"names":[],"mappings":";;AAAA,IAAM,QAAQ,QAAQ,OAAR,CAAR;AACN,IAAM,MAAM,QAAQ,KAAR,CAAN;;AAEN,SAAS,YAAT,CAAsB,WAAtB,EAAmC;AAC/B,WAAO,YAAY,KAAZ,CAAkB,iBAAlB,EAAqC,CAArC,CAAP,CAD+B;CAAnC;;AAIA,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC5B,WAAO,IAAI,KAAJ,CAAU,OAAV,EAAmB,QAAnB,CADqB;CAAhC;;AAIA,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC3B,QAAM,WAAW,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACnD,cAAM,GAAN,CAAU,OAAV,EAAmB,EAAC,cAAc,aAAd,EAApB,EACK,IADL,CACU,UAAS,QAAT,EAAmB;AACrB,oBAAQ,SAAS,IAAT,CAAR,CADqB;SAAnB,CADV,CAIK,KAJL,CAIW,UAAS,KAAT,EAAgB;AACnB,gBAAI,MAAM,MAAN,KAAiB,GAAjB,EAAsB;AACtB,0BADsB;AAEtB,uBAFsB;aAA1B;AAIA,mBAAO,KAAP,EALmB;SAAhB,CAJX,CADmD;KAA1B,CAAvB,CADqB;;AAe3B,WAAO,SAAS,IAAT,CAAc,oBAAY;AAC7B,YAAI,CAAC,QAAD,EAAW;AACX,mBAAO,IAAI,OAAJ,CAAY;uBAAW;aAAX,CAAnB,CADW;SAAf;AAGA,eAAO;AACH,oBAAQ,cAAc,OAAd,CAAR;AACA,kBAAM,aAAa,OAAb,CAAN;AACA,kBAAM,QAAN;SAHJ,CAJ6B;KAAZ,CAArB,CAf2B;CAA/B;;AA2BA,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC7B,QAAM,WAAW,SAAS,GAAT,CAAa,YAAb,CAAX,CADuB;AAE7B,WAAO,QAAQ,GAAR,CAAY,QAAZ,EACF,IADE,CACG,UAAC,SAAD,EAAe;AACjB,eAAO,UAAU,MAAV,CAAiB;mBAAW,CAAC,CAAC,OAAD;SAAZ,CAAxB,CADiB;KAAf,CADV,CAF6B;CAAjC;;AAQA,OAAO,OAAP,GAAiB,aAAjB","file":"downloadIcons.js","sourcesContent":["const axios = require('axios');\nconst url = require('url');\n\nfunction getExtension(downloadUrl) {\n    return downloadUrl.match(/\\.(png|jpg|ico)/)[0];\n}\n\nfunction getSiteDomain(siteUrl) {\n    return url.parse(siteUrl).hostname;\n}\n\nfunction downloadIcon(iconUrl) {\n    const iconData = new Promise(function(resolve, reject) {\n        axios.get(iconUrl, {responseType: 'arraybuffer'})\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                if (error.status === 404) {\n                    resolve();\n                    return;\n                }\n                reject(error);\n            });\n    });\n\n    return iconData.then(iconData => {\n        if (!iconData) {\n            return new Promise(resolve => resolve());\n        }\n        return {\n            source: getSiteDomain(iconUrl),\n            type: getExtension(iconUrl),\n            data: iconData\n        };\n    });\n}\n\nfunction downloadIcons(iconUrls) {\n    const promises = iconUrls.map(downloadIcon);\n    return Promise.all(promises)\n        .then((iconPaths) => {\n            return iconPaths.filter(element => !!element);\n        });\n}\n\nmodule.exports = downloadIcons;\n"]}