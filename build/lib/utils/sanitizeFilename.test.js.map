{"version":3,"sources":["utils/sanitizeFilename.test.js"],"names":["jest","mock","sanitizeFilenameLib","mockImplementation","str","test","param","expect","toHaveBeenCalledWith","describe","nonAscii","expectedResult","result","toBe","DEFAULT_APP_NAME"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,KAAKC,IAAL,CAAU,mBAAV;AACAC,2BAAoBC,kBAApB,CAAuC,UAACC,GAAD;AAAA,SAASA,GAAT;AAAA,CAAvC;;AAEAC,KAAK,iDAAL,EAAwD,YAAM;AAC5D,MAAMC,QAAQ,KAAd;AACA,kCAAiB,EAAjB,EAAqBA,KAArB;AACAC,SAAOL,0BAAP,EAA4BM,oBAA5B,CAAiDF,KAAjD;AACD,CAJD;;AAMAG,SAAS,gCAAT,EAA2C,YAAM;AAC/C,MAAMC,WAAW,GAAjB;AACAL,OAAK,wDAAL,EAA+D,YAAM;AACnE,QAAMC,QAAS,GAAEI,QAAS,KAA1B;AACA,QAAMC,iBAAiB,KAAvB;AACA,QAAMC,SAAS,gCAAiB,EAAjB,EAAqBN,KAArB,CAAf;AACAC,WAAOK,MAAP,EAAeC,IAAf,CAAoBF,cAApB;AACD,GALD;;AAOAF,WAAS,wDAAT,EAAmE,YAAM;AACvE,QAAMG,SAAS,gCAAiB,EAAjB,EAAqBF,QAArB,CAAf;AACAH,WAAOK,MAAP,EAAeC,IAAf,CAAoBC,2BAApB;AACD,GAHD;AAID,CAbD;;AAeAL,SAAS,4BAAT,EAAuC,YAAM;AAC3CJ,OAAK,qCAAL,EAA4C,YAAM;AAChD,QAAMC,QAAQ,WAAd;AACA,QAAMK,iBAAiB,WAAvB;AACA,QAAMC,SAAS,gCAAiB,OAAjB,EAA0BN,KAA1B,CAAf;AACAC,WAAOK,MAAP,EAAeC,IAAf,CAAoBF,cAApB;AACD,GALD;AAMD,CAPD","file":"sanitizeFilename.test.js","sourcesContent":["import sanitizeFilenameLib from 'sanitize-filename';\nimport sanitizeFilename from './sanitizeFilename';\nimport { DEFAULT_APP_NAME } from './../constants';\n\njest.mock('sanitize-filename');\nsanitizeFilenameLib.mockImplementation((str) => str);\n\ntest('it should call the sanitize-filename npm module', () => {\n  const param = 'abc';\n  sanitizeFilename('', param);\n  expect(sanitizeFilenameLib).toHaveBeenCalledWith(param);\n});\n\ndescribe('replacing non ascii characters', () => {\n  const nonAscii = 'ï¿½';\n  test('it should return a result without non ascii characters', () => {\n    const param = `${nonAscii}abc`;\n    const expectedResult = 'abc';\n    const result = sanitizeFilename('', param);\n    expect(result).toBe(expectedResult);\n  });\n\n  describe('when the result of replacing these characters is empty', () => {\n    const result = sanitizeFilename('', nonAscii);\n    expect(result).toBe(DEFAULT_APP_NAME);\n  });\n});\n\ndescribe('when the platform is linux', () => {\n  test('it should return a kebab cased name', () => {\n    const param = 'some name';\n    const expectedResult = 'some-name';\n    const result = sanitizeFilename('linux', param);\n    expect(result).toBe(expectedResult);\n  });\n});\n"]}