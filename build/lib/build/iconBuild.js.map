{"version":3,"sources":["build/iconBuild.js"],"names":["isOSX","helpers","convertToPng","iconShellHelpers","convertToIco","convertToIcns","iconIsIco","iconPath","path","extname","iconIsPng","iconIsIcns","iconBuild","inpOptions","callback","options","Object","assign","returnCallback","icon","platform","then","outPath","catch","error","log","warn","undefined"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,K,GAAUC,iB,CAAVD,K;IACAE,Y,GAA8CC,0B,CAA9CD,Y;IAAcE,Y,GAAgCD,0B,CAAhCC,Y;IAAcC,a,GAAkBF,0B,CAAlBE,a;;;AAEpC,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,SAAOC,eAAKC,OAAL,CAAaF,QAAb,MAA2B,MAAlC;AACD;;AAED,SAASG,SAAT,CAAmBH,QAAnB,EAA6B;AAC3B,SAAOC,eAAKC,OAAL,CAAaF,QAAb,MAA2B,MAAlC;AACD;;AAED,SAASI,UAAT,CAAoBJ,QAApB,EAA8B;AAC5B,SAAOC,eAAKC,OAAL,CAAaF,QAAb,MAA2B,OAAlC;AACD;;AAED;;;;;;AAMA;;;;;;;AAOA,SAASK,SAAT,CAAmBC,UAAnB,EAA+BC,QAA/B,EAAyC;AACvC,MAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,UAAlB,CAAhB;AACA,MAAMK,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3BJ,aAAS,IAAT,EAAeC,OAAf;AACD,GAFD;;AAIA,MAAI,CAACA,QAAQI,IAAb,EAAmB;AACjBD;AACA;AACD;;AAED,MAAIH,QAAQK,QAAR,KAAqB,OAAzB,EAAkC;AAChC,QAAId,UAAUS,QAAQI,IAAlB,CAAJ,EAA6B;AAC3BD;AACA;AACD;;AAEDd,iBAAaW,QAAQI,IAArB,EACGE,IADH,CACQ,UAACC,OAAD,EAAa;AACjBP,cAAQI,IAAR,GAAeG,OAAf;AACAJ;AACD,KAJH,EAKGK,KALH,CAKS,UAACC,KAAD,EAAW;AAChBC,yBAAIC,IAAJ,CAAS,kCAAT,EAA6CF,KAA7C;AACAN;AACD,KARH;AASA;AACD;;AAED,MAAIH,QAAQK,QAAR,KAAqB,OAAzB,EAAkC;AAChC,QAAIV,UAAUK,QAAQI,IAAlB,CAAJ,EAA6B;AAC3BD;AACA;AACD;;AAEDhB,iBAAaa,QAAQI,IAArB,EACGE,IADH,CACQ,UAACC,OAAD,EAAa;AACjBP,cAAQI,IAAR,GAAeG,OAAf;AACAJ;AACD,KAJH,EAKGK,KALH,CAKS,UAACC,KAAD,EAAW;AAChBC,yBAAIC,IAAJ,CAAS,kCAAT,EAA6CF,KAA7C;AACAN;AACD,KARH;AASA;AACD;;AAED,MAAIP,WAAWI,QAAQI,IAAnB,CAAJ,EAA8B;AAC5BD;AACA;AACD;;AAED,MAAI,CAAClB,OAAL,EAAc;AACZyB,uBAAIC,IAAJ,CACE,wEADF;AAGAR;AACA;AACD;;AAEDb,gBAAcU,QAAQI,IAAtB,EACGE,IADH,CACQ,UAACC,OAAD,EAAa;AACjBP,YAAQI,IAAR,GAAeG,OAAf;AACAJ;AACD,GAJH,EAKGK,KALH,CAKS,UAACC,KAAD,EAAW;AAChBC,uBAAIC,IAAJ,CAAS,mCAAT,EAA8CF,KAA9C;AACAT,YAAQI,IAAR,GAAeQ,SAAf;AACAT;AACD,GATH;AAUD;;kBAEcN,S","file":"iconBuild.js","sourcesContent":["import path from 'path';\nimport log from 'loglevel';\nimport helpers from './../helpers/helpers';\nimport iconShellHelpers from './../helpers/iconShellHelpers';\n\nconst { isOSX } = helpers;\nconst { convertToPng, convertToIco, convertToIcns } = iconShellHelpers;\n\nfunction iconIsIco(iconPath) {\n  return path.extname(iconPath) === '.ico';\n}\n\nfunction iconIsPng(iconPath) {\n  return path.extname(iconPath) === '.png';\n}\n\nfunction iconIsIcns(iconPath) {\n  return path.extname(iconPath) === '.icns';\n}\n\n/**\n * @callback augmentIconsCallback\n * @param error\n * @param options\n */\n\n/**\n * Will check and convert a `.png` to `.icns` if necessary and augment\n * options.icon with the result\n *\n * @param inpOptions will need options.platform and options.icon\n * @param {augmentIconsCallback} callback\n */\nfunction iconBuild(inpOptions, callback) {\n  const options = Object.assign({}, inpOptions);\n  const returnCallback = () => {\n    callback(null, options);\n  };\n\n  if (!options.icon) {\n    returnCallback();\n    return;\n  }\n\n  if (options.platform === 'win32') {\n    if (iconIsIco(options.icon)) {\n      returnCallback();\n      return;\n    }\n\n    convertToIco(options.icon)\n      .then((outPath) => {\n        options.icon = outPath;\n        returnCallback();\n      })\n      .catch((error) => {\n        log.warn('Skipping icon conversion to .ico', error);\n        returnCallback();\n      });\n    return;\n  }\n\n  if (options.platform === 'linux') {\n    if (iconIsPng(options.icon)) {\n      returnCallback();\n      return;\n    }\n\n    convertToPng(options.icon)\n      .then((outPath) => {\n        options.icon = outPath;\n        returnCallback();\n      })\n      .catch((error) => {\n        log.warn('Skipping icon conversion to .png', error);\n        returnCallback();\n      });\n    return;\n  }\n\n  if (iconIsIcns(options.icon)) {\n    returnCallback();\n    return;\n  }\n\n  if (!isOSX()) {\n    log.warn(\n      'Skipping icon conversion to .icns, conversion is only supported on OSX',\n    );\n    returnCallback();\n    return;\n  }\n\n  convertToIcns(options.icon)\n    .then((outPath) => {\n      options.icon = outPath;\n      returnCallback();\n    })\n    .catch((error) => {\n      log.warn('Skipping icon conversion to .icns', error);\n      options.icon = undefined;\n      returnCallback();\n    });\n}\n\nexport default iconBuild;\n"]}