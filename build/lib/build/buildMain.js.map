{"version":3,"sources":["build/buildMain.js"],"names":["copy","ncp","isWindows","helpers","getAppPath","appPathArray","length","log","warn","maybeNoIconOption","options","packageOptions","JSON","parse","stringify","platform","hasBinary","sync","icon","maybeCopyIcons","appPath","callback","destIconPath","path","join","destFileName","extname","error","removeInvalidOptions","param","maybeNoAppCopyrightOption","maybeNoBuildVersionOption","maybeNoAppVersionOption","maybeNoVersionStringOption","maybeNoWin32metadataOption","buildMain","inpOptions","Object","assign","tmpObj","tmp","dirSync","mode","unsafeCleanup","tmpPath","name","packagerConsole","PackagerConsole","progress","DishonestProgress","async","waterfall","cb","tick","then","result","catch","opts","dir","newOptions","optionsWithIcon","override","restore","playback"],"mappings":"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","file":"buildMain.js","sourcesContent":["import path from 'path';\nimport packager from 'electron-packager';\nimport tmp from 'tmp';\nimport ncp from 'ncp';\nimport async from 'async';\nimport hasBinary from 'hasbin';\nimport log from 'loglevel';\nimport DishonestProgress from './../helpers/dishonestProgress';\nimport optionsFactory from './../options/optionsMain';\nimport iconBuild from './iconBuild';\nimport helpers from './../helpers/helpers';\nimport PackagerConsole from './../helpers/packagerConsole';\nimport buildApp from './buildApp';\n\nconst copy = ncp.ncp;\nconst { isWindows } = helpers;\n\n/**\n * Checks the app path array to determine if the packaging was completed successfully\n * @param appPathArray Result from electron-packager\n * @returns {*}\n */\nfunction getAppPath(appPathArray) {\n  if (appPathArray.length === 0) {\n    // directory already exists, --overwrite is not set\n    // exit here\n    return null;\n  }\n\n  if (appPathArray.length > 1) {\n    log.warn(\n      'Warning: This should not be happening, packaged app path contains more than one element:',\n      appPathArray,\n    );\n  }\n\n  return appPathArray[0];\n}\n\n/**\n * Removes the `icon` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoIconOption(options) {\n  const packageOptions = JSON.parse(JSON.stringify(options));\n  if (options.platform === 'win32' && !isWindows()) {\n    if (!hasBinary.sync('wine')) {\n      log.warn(\n        'Wine is required to set the icon for a Windows app when packaging on non-windows platforms',\n      );\n      packageOptions.icon = null;\n    }\n  }\n  return packageOptions;\n}\n\n/**\n * For windows and linux, we have to copy over the icon to the resources/app folder, which the\n * BrowserWindow is hard coded to read the icon from\n * @param {{}} options\n * @param {string} appPath\n * @param callback\n */\nfunction maybeCopyIcons(options, appPath, callback) {\n  if (!options.icon) {\n    callback();\n    return;\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    callback();\n    return;\n  }\n\n  // windows & linux\n  // put the icon file into the app\n  const destIconPath = path.join(appPath, 'resources/app');\n  const destFileName = `icon${path.extname(options.icon)}`;\n  copy(options.icon, path.join(destIconPath, destFileName), (error) => {\n    callback(error);\n  });\n}\n\n/**\n * Removes invalid parameters from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction removeInvalidOptions(options, param) {\n  const packageOptions = JSON.parse(JSON.stringify(options));\n  if (options.platform === 'win32' && !isWindows()) {\n    if (!hasBinary.sync('wine')) {\n      log.warn(\n        `Wine is required to use \"${param}\" option for a Windows app when packaging on non-windows platforms`,\n      );\n      packageOptions[param] = null;\n    }\n  }\n  return packageOptions;\n}\n\n/**\n * Removes the `appCopyright` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoAppCopyrightOption(options) {\n  return removeInvalidOptions(options, 'appCopyright');\n}\n\n/**\n * Removes the `buildVersion` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoBuildVersionOption(options) {\n  return removeInvalidOptions(options, 'buildVersion');\n}\n\n/**\n * Removes the `appVersion` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoAppVersionOption(options) {\n  return removeInvalidOptions(options, 'appVersion');\n}\n\n/**\n * Removes the `versionString` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoVersionStringOption(options) {\n  return removeInvalidOptions(options, 'versionString');\n}\n\n/**\n * Removes the `win32metadata` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoWin32metadataOption(options) {\n  return removeInvalidOptions(options, 'win32metadata');\n}\n\n/**\n * @callback buildAppCallback\n * @param error\n * @param {string} appPath\n */\n\n/**\n *\n * @param {{}} inpOptions\n * @param {buildAppCallback} callback\n */\nfunction buildMain(inpOptions, callback) {\n  const options = Object.assign({}, inpOptions);\n\n  // pre process app\n  const tmpObj = tmp.dirSync({ mode: '0755', unsafeCleanup: true });\n  const tmpPath = tmpObj.name;\n\n  // todo check if this is still needed on later version of packager\n  const packagerConsole = new PackagerConsole();\n\n  const progress = new DishonestProgress(5);\n\n  async.waterfall(\n    [\n      (cb) => {\n        progress.tick('inferring');\n        optionsFactory(options)\n          .then((result) => {\n            cb(null, result);\n          })\n          .catch((error) => {\n            cb(error);\n          });\n      },\n      (opts, cb) => {\n        progress.tick('copying');\n        buildApp(opts.dir, tmpPath, opts, (error) => {\n          if (error) {\n            cb(error);\n            return;\n          }\n          // Change the reference file for the Electron app to be the temporary path\n          const newOptions = Object.assign({}, opts, {\n            dir: tmpPath,\n          });\n          cb(null, newOptions);\n        });\n      },\n      (opts, cb) => {\n        progress.tick('icons');\n        iconBuild(opts, (error, optionsWithIcon) => {\n          cb(null, optionsWithIcon);\n        });\n      },\n      (opts, cb) => {\n        progress.tick('packaging');\n        // maybe skip passing icon parameter to electron packager\n        let packageOptions = maybeNoIconOption(opts);\n        // maybe skip passing other parameters to electron packager\n        packageOptions = maybeNoAppCopyrightOption(packageOptions);\n        packageOptions = maybeNoAppVersionOption(packageOptions);\n        packageOptions = maybeNoBuildVersionOption(packageOptions);\n        packageOptions = maybeNoVersionStringOption(packageOptions);\n        packageOptions = maybeNoWin32metadataOption(packageOptions);\n\n        packagerConsole.override();\n\n        packager(packageOptions)\n          .then((appPathArray) => {\n            packagerConsole.restore(); // restore console.error\n            cb(null, opts, appPathArray); // options still contain the icon to waterfall\n          })\n          .catch((error) => {\n            packagerConsole.restore(); // restore console.error\n            cb(error, opts); // options still contain the icon to waterfall\n          });\n      },\n      (opts, appPathArray, cb) => {\n        progress.tick('finalizing');\n        // somehow appPathArray is a 1 element array\n        const appPath = getAppPath(appPathArray);\n        if (!appPath) {\n          cb();\n          return;\n        }\n\n        maybeCopyIcons(opts, appPath, (error) => {\n          cb(error, appPath);\n        });\n      },\n    ],\n    (error, appPath) => {\n      packagerConsole.playback();\n      callback(error, appPath);\n    },\n  );\n}\n\nexport default buildMain;\n"]}