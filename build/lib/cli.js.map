{"version":3,"sources":["cli.js"],"names":["dns","require","packageJson","log","collect","val","memo","push","parseJson","JSON","parse","getProcessEnvs","pEnv","processEnvs","checkInternet","lookup","err","code","warn","main","module","program","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","process","argv","slice","length","help","error","appPath","info"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport nativefier from './index';\n\nconst dns = require('dns');\nconst packageJson = require('./../package');\nconst log = require('loglevel');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction parseJson(val) {\n  if (!val) return {};\n  return JSON.parse(val);\n}\n\nfunction getProcessEnvs(val) {\n  if (!val) return {};\n  const pEnv = {};\n  pEnv.processEnvs = parseJson(val);\n  return pEnv;\n}\n\nfunction checkInternet() {\n  dns.lookup('npmjs.com', (err) => {\n    if (err && err.code === 'ENOTFOUND') {\n      log.warn(\n        '\\nNo Internet Connection\\nTo offline build, download electron from https://github.com/electron/electron/releases\\nand place in ~/AppData/Local/electron/Cache/ on Windows,\\n~/.cache/electron on Linux or ~/Library/Caches/electron/ on Mac\\nUse --electron-version to specify the version you downloaded.',\n      );\n    }\n  });\n}\n\nif (require.main === module) {\n  program\n    .version(packageJson.version)\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', \"'osx', 'mas', 'linux' or 'windows'\")\n    .option('-a, --arch <value>', \"'ia32' or 'x64' or 'armv7l'\")\n    .option(\n      '--app-version <value>',\n      'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.',\n    )\n    .option(\n      '--build-version <value>',\n      'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.',\n    )\n    .option(\n      '--app-copyright <value>',\n      'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X',\n    )\n    .option(\n      '--win32metadata <json-string>',\n      'a JSON string of key/value pairs of application metadata (ProductName, InternalName, FileDescription) to embed into the executable (Windows only).',\n      parseJson,\n    )\n    .option(\n      '-e, --electron-version <value>',\n      \"electron version to package, without the 'v', see https://github.com/atom/electron/releases\",\n    )\n    .option(\n      '--no-overwrite',\n      'do not override output directory if it already exists, defaults to false',\n    )\n    .option(\n      '-c, --conceal',\n      'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/',\n    )\n    .option(\n      '--counter',\n      'if the target app should use a persistent counter badge in the dock (macOS only), defaults to false',\n    )\n    .option(\n      '--bounce',\n      'if the the dock icon should bounce when counter increases (macOS only), defaults to false',\n    )\n    .option(\n      '-i, --icon <value>',\n      'the icon file to use as the icon for the app (should be a .png)',\n    )\n    .option(\n      '--width <value>',\n      'set window default width, defaults to 1280px',\n      parseInt,\n    )\n    .option(\n      '--height <value>',\n      'set window default height, defaults to 800px',\n      parseInt,\n    )\n    .option(\n      '--min-width <value>',\n      'set window minimum width, defaults to 0px',\n      parseInt,\n    )\n    .option(\n      '--min-height <value>',\n      'set window minimum height, defaults to 0px',\n      parseInt,\n    )\n    .option(\n      '--max-width <value>',\n      'set window maximum width, default is no limit',\n      parseInt,\n    )\n    .option(\n      '--max-height <value>',\n      'set window maximum height, default is no limit',\n      parseInt,\n    )\n    .option('--x <value>', 'set window x location', parseInt)\n    .option('--y <value>', 'set window y location', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option(\n      '-f, --fast-quit',\n      'quit app after window close (macOS only), defaults to false',\n    )\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option(\n      '--honest',\n      'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser',\n    )\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--disable-gpu', 'disable hardware acceleration')\n    .option(\n      '--ignore-gpu-blacklist',\n      'allow WebGl apps to work on non supported graphics cards',\n    )\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option(\n      '--insecure',\n      'enable loading of insecure content, defaults to false',\n    )\n    .option('--flash', 'if flash should be enabled')\n    .option(\n      '--flash-path <value>',\n      'path to Chrome flash plugin, find it in `Chrome://plugins`',\n    )\n    .option(\n      '--disk-cache-size <value>',\n      'forces the maximum disk space (in bytes) to be used by the disk cache',\n    )\n    .option(\n      '--inject <value>',\n      'path to a CSS/JS file to be injected',\n      collect,\n      [],\n    )\n    .option(\n      '--full-screen',\n      'if the app should always be started in full screen',\n    )\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option(\n      '--zoom <value>',\n      'default zoom factor to use when the app is opened, defaults to 1.0',\n      parseFloat,\n    )\n    .option(\n      '--internal-urls <value>',\n      'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)',\n    )\n    .option(\n      '--crash-reporter <value>',\n      'remote server URL to send crash reports',\n    )\n    .option(\n      '--single-instance',\n      'allow only a single instance of the application',\n    )\n    .option(\n      '--processEnvs <json-string>',\n      'a JSON string of key/value pairs to be set as environment variables before any browser windows are opened.',\n      getProcessEnvs,\n    )\n    .option(\n      '--file-download-options <json-string>',\n      'a JSON string of key/value pairs to be set as file download options.  See https://github.com/sindresorhus/electron-dl for available options.',\n      parseJson,\n    )\n    .option('--tray', 'allow app to stay in system tray')\n    .option('--basic-auth-username <value>', 'basic http(s) auth username')\n    .option('--basic-auth-password <value>', 'basic http(s) auth password')\n    .option('--always-on-top', 'enable always on top window')\n    .option(\n      '--title-bar-style <value>',\n      \"(macOS only) set title bar style ('hidden', 'hiddenInset').  Consider injecting custom CSS (via --inject) for better integration.\",\n    )\n    .parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n  checkInternet();\n  nativefier(program, (error, appPath) => {\n    if (error) {\n      log.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    log.info(`App built to ${appPath}`);\n  });\n}\n"]}