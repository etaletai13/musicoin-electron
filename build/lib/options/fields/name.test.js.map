{"version":3,"sources":["options/fields/name.test.js"],"names":["jest","mock","sanitizeFilename","mockImplementation","_","filename","mockedResult","describe","params","name","platform","test","result","expect","inferTitle","toHaveBeenCalledTimes","toBe","toHaveBeenCalledWith","beforeEach","mockImplementationOnce","Promise","resolve","targetUrl","testParams","then","DEFAULT_APP_NAME","reject","Error","log","warn"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,0BAAV;AACAD,KAAKC,IAAL,CAAU,gCAAV;AACAD,KAAKC,IAAL,CAAU,UAAV;;AAEAC,wBAAiBC,kBAAjB,CAAoC,UAACC,CAAD,EAAIC,QAAJ;AAAA,SAAiBA,QAAjB;AAAA,CAApC;;AAEA,IAAMC,eAAe,WAArB;;AAEAC,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAMC,SAAS,EAAEC,MAAM,SAAR,EAAmBC,UAAU,WAA7B,EAAf;AACAC,OAAK,+BAAL,0DAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACf,oBAAKH,MAAL,CADe;;AAAA;AAC9BI,kBAD8B;;;AAGpCC,mBAAOC,iBAAP,EAAmBC,qBAAnB,CAAyC,CAAzC;AACAF,mBAAOD,MAAP,EAAeI,IAAf,CAAoBR,OAAOC,IAA3B;;AAJoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAOAE,OAAK,kCAAL,0DAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClB,oBAAKH,MAAL,CADkB;;AAAA;AACjCI,kBADiC;;AAEvCC,mBAAOX,uBAAP,EAAyBe,oBAAzB,CAA8CT,OAAOE,QAArD,EAA+DE,MAA/D;;AAFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;AAID,CAbD;;AAeAL,SAAS,qBAAT,EAAgC,YAAM;AACpCW,aAAW,YAAM;AACfJ,sBAAWK,sBAAX,CAAkC;AAAA,aAAMC,QAAQC,OAAR,CAAgBf,YAAhB,CAAN;AAAA,KAAlC;AACD,GAFD;;AAIA,MAAME,SAAS,EAAEc,WAAW,UAAb,EAAf;AACAf,WAAS,4BAAT,EAAuC,YAAM;AAC3CI,SAAK,2BAAL,0DAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC1B,oBAAKH,MAAL,CAD0B;;AAAA;AAEhCK,qBAAOC,iBAAP,EAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;;AAFgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;AAID,GALD;;AAOAf,WAAS,kCAAT,EAA6C,YAAM;AACjDI,SAAK,2BAAL,0DAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BY,wBAD0B,gBAE3Bf,MAF2B;AAG9BC,sBAAM;AAHwB;AAAA;AAAA,qBAM1B,oBAAKc,UAAL,CAN0B;;AAAA;AAOhCV,qBAAOC,iBAAP,EAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;;AAPgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;AASD,GAVD;;AAYAX,OAAK,kCAAL,EAAyC;AAAA,WACvC,oBAAKH,MAAL,EAAagB,IAAb,CAAkB,UAACZ,MAAD,EAAY;AAC5BC,aAAOX,uBAAP,EAAyBe,oBAAzB,CAA8CT,OAAOE,QAArD,EAA+DE,MAA/D;AACD,KAFD,CADuC;AAAA,GAAzC;AAID,CA7BD;;AA+BAL,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAMC,SAAS,EAAEc,WAAW,UAAb,EAAyBb,MAAM,EAA/B,EAAmCC,UAAU,WAA7C,EAAf;AACAC,OAAK,6CAAL,0DAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAClDG,8BAAWK,sBAAX,CAAkC;AAAA,qBAAMC,QAAQC,OAAR,CAAgBf,YAAhB,CAAN;AAAA,aAAlC;;AADkD;AAAA,mBAG7B,oBAAKE,MAAL,CAH6B;;AAAA;AAG5CI,kBAH4C;;AAIlDC,mBAAOD,MAAP,EAAeI,IAAf,CAAoBV,YAApB;AACAO,mBAAOC,iBAAP,EAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;;AALkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD;;AAQAf,WAAS,uCAAT,EAAkD,YAAM;AACtDI,SAAK,uCAAL,0DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CG,gCAAWK,sBAAX,CAAkC;AAAA,uBAAMC,QAAQC,OAAR,CAAgB,IAAhB,CAAN;AAAA,eAAlC;;AAD4C;AAAA,qBAGvB,oBAAKb,MAAL,CAHuB;;AAAA;AAGtCI,oBAHsC;;AAI5CC,qBAAOD,MAAP,EAAeI,IAAf,CAAoBS,2BAApB;AACAZ,qBAAOC,iBAAP,EAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;;AAL4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;AAOD,GARD;;AAUAf,WAAS,wCAAT,EAAmD,YAAM;AACvDI,SAAK,uCAAL,0DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CG,gCAAWK,sBAAX,CAAkC;AAAA,uBAChCC,QAAQM,MAAR,CAAe,IAAIC,KAAJ,CAAU,YAAV,CAAf,CADgC;AAAA,eAAlC;;AAD4C;AAAA,qBAKvB,oBAAKnB,MAAL,CALuB;;AAAA;AAKtCI,oBALsC;;AAM5CC,qBAAOD,MAAP,EAAeI,IAAf,CAAoBS,2BAApB;AACAZ,qBAAOC,iBAAP,EAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACAT,qBAAOe,mBAAIC,IAAX,EAAiBd,qBAAjB,CAAuC,CAAvC;;AAR4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;AAUD,GAXD;AAYD,CAhCD","file":"name.test.js","sourcesContent":["import log from 'loglevel';\nimport name from './name';\nimport { DEFAULT_APP_NAME } from './../../constants';\nimport { inferTitle } from './../../infer';\nimport { sanitizeFilename } from './../../utils';\n\njest.mock('./../../infer/inferTitle');\njest.mock('./../../utils/sanitizeFilename');\njest.mock('loglevel');\n\nsanitizeFilename.mockImplementation((_, filename) => filename);\n\nconst mockedResult = 'mock name';\n\ndescribe('well formed name parameters', () => {\n  const params = { name: 'appname', platform: 'something' };\n  test('it should not call inferTitle', async () => {\n    const result = await name(params);\n\n    expect(inferTitle).toHaveBeenCalledTimes(0);\n    expect(result).toBe(params.name);\n  });\n\n  test('it should call sanitize filename', async () => {\n    const result = await name(params);\n    expect(sanitizeFilename).toHaveBeenCalledWith(params.platform, result);\n  });\n});\n\ndescribe('bad name parameters', () => {\n  beforeEach(() => {\n    inferTitle.mockImplementationOnce(() => Promise.resolve(mockedResult));\n  });\n\n  const params = { targetUrl: 'some url' };\n  describe('when the name is undefined', () => {\n    test('it should call inferTitle', async () => {\n      await name(params);\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n    });\n  });\n\n  describe('when the name is an empty string', () => {\n    test('it should call inferTitle', async () => {\n      const testParams = {\n        ...params,\n        name: '',\n      };\n\n      await name(testParams);\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n    });\n  });\n\n  test('it should call sanitize filename', () =>\n    name(params).then((result) => {\n      expect(sanitizeFilename).toHaveBeenCalledWith(params.platform, result);\n    }));\n});\n\ndescribe('handling inferTitle results', () => {\n  const params = { targetUrl: 'some url', name: '', platform: 'something' };\n  test('it should return the result from inferTitle', async () => {\n    inferTitle.mockImplementationOnce(() => Promise.resolve(mockedResult));\n\n    const result = await name(params);\n    expect(result).toBe(mockedResult);\n    expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n  });\n\n  describe('when the returned pageTitle is falsey', () => {\n    test('it should return the default app name', async () => {\n      inferTitle.mockImplementationOnce(() => Promise.resolve(null));\n\n      const result = await name(params);\n      expect(result).toBe(DEFAULT_APP_NAME);\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n    });\n  });\n\n  describe('when inferTitle resolves with an error', () => {\n    test('it should return the default app name', async () => {\n      inferTitle.mockImplementationOnce(() =>\n        Promise.reject(new Error('some error')),\n      );\n\n      const result = await name(params);\n      expect(result).toBe(DEFAULT_APP_NAME);\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n      expect(log.warn).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"]}