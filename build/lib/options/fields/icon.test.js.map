{"version":3,"sources":["options/fields/icon.test.js"],"names":["jest","mock","mockedResult","describe","test","expect","inferIcon","toHaveBeenCalledTimes","params","icon","resolves","toBe","mockImplementationOnce","Promise","resolve","targetUrl","platform","result","toHaveBeenCalledWith","reject","Error","log","warn"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,yBAAV;AACAD,KAAKC,IAAL,CAAU,UAAV;;AAEA,IAAMC,eAAe,WAArB;;AAEAC,SAAS,mCAAT,EAA8C,YAAM;AAClDC,OAAK,qCAAL,0DAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1CC,mBAAOC,gBAAP,EAAkBC,qBAAlB,CAAwC,CAAxC;;AAEMC,kBAHoC,GAG3B,EAAEC,MAAM,YAAR,EAH2B;AAAA;AAAA,mBAIpCJ,OAAO,oBAAKG,MAAL,CAAP,EAAqBE,QAArB,CAA8BC,IAA9B,CAAmCH,OAAOC,IAA1C,CAJoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;AAMD,CAPD;;AASAN,SAAS,uCAAT,EAAkD,YAAM;AACtDC,OAAK,0BAAL,0DAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BE,6BAAUM,sBAAV,CAAiC;AAAA,qBAAMC,QAAQC,OAAR,CAAgBZ,YAAhB,CAAN;AAAA,aAAjC;AACMM,kBAFyB,GAEhB,EAAEO,WAAW,UAAb,EAAyBC,UAAU,KAAnC,EAFgB;AAAA;AAAA,mBAIV,oBAAKR,MAAL,CAJU;;AAAA;AAIzBS,kBAJyB;;;AAM/BZ,mBAAOY,MAAP,EAAeN,IAAf,CAAoBT,YAApB;AACAG,mBAAOC,gBAAP,EAAkBY,oBAAlB,CAAuCV,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAUAb,WAAS,uCAAT,EAAkD,YAAM;AACtDC,SAAK,4BAAL,0DAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCE,+BAAUM,sBAAV,CAAiC;AAAA,uBAC/BC,QAAQM,MAAR,CAAe,IAAIC,KAAJ,CAAU,YAAV,CAAf,CAD+B;AAAA,eAAjC;AAGMZ,oBAJ2B,GAIlB,EAAEO,WAAW,UAAb,EAAyBC,UAAU,KAAnC,EAJkB;AAAA;AAAA,qBAMZ,oBAAKR,MAAL,CANY;;AAAA;AAM3BS,oBAN2B;;AAOjCZ,qBAAOY,MAAP,EAAeN,IAAf,CAAoB,IAApB;AACAN,qBAAOC,gBAAP,EAAkBY,oBAAlB,CAAuCV,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;AACAX,qBAAOgB,mBAAIC,IAAX,EAAiBf,qBAAjB,CAAuC,CAAvC;;AATiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnC;AAWD,GAZD;AAaD,CAxBD","file":"icon.test.js","sourcesContent":["import log from 'loglevel';\nimport icon from './icon';\nimport { inferIcon } from './../../infer';\n\njest.mock('./../../infer/inferIcon');\njest.mock('loglevel');\n\nconst mockedResult = 'icon path';\n\ndescribe('when the icon parameter is passed', () => {\n  test('it should return the icon parameter', async () => {\n    expect(inferIcon).toHaveBeenCalledTimes(0);\n\n    const params = { icon: './icon.png' };\n    await expect(icon(params)).resolves.toBe(params.icon);\n  });\n});\n\ndescribe('when the icon parameter is not passed', () => {\n  test('it should call inferIcon', async () => {\n    inferIcon.mockImplementationOnce(() => Promise.resolve(mockedResult));\n    const params = { targetUrl: 'some url', platform: 'mac' };\n\n    const result = await icon(params);\n\n    expect(result).toBe(mockedResult);\n    expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n  });\n\n  describe('when inferIcon resolves with an error', () => {\n    test('it should handle the error', async () => {\n      inferIcon.mockImplementationOnce(() =>\n        Promise.reject(new Error('some error')),\n      );\n      const params = { targetUrl: 'some url', platform: 'mac' };\n\n      const result = await icon(params);\n      expect(result).toBe(null);\n      expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n      expect(log.warn).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"]}