{"version":3,"sources":["helpers/dishonestProgress.js"],"names":["DishonestProgress","total","tickParts","bar","ProgressBar","complete","incomplete","width","clear","tickingPrevious","message","remainder","interval","prevRemainder","prevMessage","prevInterval","tick","task","clearInterval","realRemainder","curr","setInterval"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,iB;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AACjB,SAAKC,SAAL,GAAiBD,QAAQ,EAAzB;;AAEA,SAAKE,GAAL,GAAW,IAAIC,kBAAJ,CAAgB,yBAAhB,EAA2C;AACpDC,gBAAU,GAD0C;AAEpDC,kBAAY,GAFwC;AAGpDL,aAAOA,QAAQ,KAAKC,SAHgC;AAIpDK,aAAO,EAJ6C;AAKpDC,aAAO;AAL6C,KAA3C,CAAX;;AAQA,SAAKC,eAAL,GAAuB;AACrBC,eAAS,EADY;AAErBC,iBAAW,CAFU;AAGrBC,gBAAU;AAHW,KAAvB;AAKD;;;;yBAEIF,O,EAAS;AAAA;;AAAA,6BAKR,KAAKD,eALG;AAAA,UAECI,aAFD,oBAEVF,SAFU;AAAA,UAGDG,WAHC,oBAGVJ,OAHU;AAAA,UAIAK,YAJA,oBAIVH,QAJU;;;AAOZ,UAAIC,aAAJ,EAAmB;AACjB,aAAKV,GAAL,CAASa,IAAT,CAAcH,aAAd,EAA6B;AAC3BI,gBAAMH;AADqB,SAA7B;AAGAI,sBAAcH,YAAd;AACD;;AAED,UAAMI,gBAAgB,KAAKhB,GAAL,CAASF,KAAT,GAAiB,KAAKE,GAAL,CAASiB,IAAhD;AACA,UAAID,kBAAkB,KAAKjB,SAA3B,EAAsC;AACpC,aAAKC,GAAL,CAASa,IAAT,CAAc,KAAKd,SAAnB,EAA8B;AAC5Be,gBAAMP;AADsB,SAA9B;AAGA;AACD;;AAED,WAAKP,GAAL,CAASa,IAAT,CAAc;AACZC,cAAMP;AADM,OAAd;;AAIA,WAAKD,eAAL,GAAuB;AACrBC,eADqB;AAErBC,mBAAW,KAAKT,SAFK;AAGrBU,kBAAU;AAHW,OAAvB;;AAMA,WAAKH,eAAL,CAAqBE,SAArB,IAAkC,CAAlC;;AAEA,WAAKF,eAAL,CAAqBG,QAArB,GAAgCS,YAAY,YAAM;AAChD,YAAI,MAAKZ,eAAL,CAAqBE,SAArB,KAAmC,CAAvC,EAA0C;AACxCO,wBAAc,MAAKT,eAAL,CAAqBG,QAAnC;AACA;AACD;;AAED,cAAKT,GAAL,CAASa,IAAT,CAAc;AACZC,gBAAMP;AADM,SAAd;AAGA,cAAKD,eAAL,CAAqBE,SAArB,IAAkC,CAAlC;AACD,OAV+B,EAU7B,GAV6B,CAAhC;AAWD;;;;;;kBAGYX,iB","file":"dishonestProgress.js","sourcesContent":["import ProgressBar from 'progress';\n\nclass DishonestProgress {\n  constructor(total) {\n    this.tickParts = total * 10;\n\n    this.bar = new ProgressBar('  :task [:bar] :percent', {\n      complete: '=',\n      incomplete: ' ',\n      total: total * this.tickParts,\n      width: 50,\n      clear: true,\n    });\n\n    this.tickingPrevious = {\n      message: '',\n      remainder: 0,\n      interval: null,\n    };\n  }\n\n  tick(message) {\n    const {\n      remainder: prevRemainder,\n      message: prevMessage,\n      interval: prevInterval,\n    } = this.tickingPrevious;\n\n    if (prevRemainder) {\n      this.bar.tick(prevRemainder, {\n        task: prevMessage,\n      });\n      clearInterval(prevInterval);\n    }\n\n    const realRemainder = this.bar.total - this.bar.curr;\n    if (realRemainder === this.tickParts) {\n      this.bar.tick(this.tickParts, {\n        task: message,\n      });\n      return;\n    }\n\n    this.bar.tick({\n      task: message,\n    });\n\n    this.tickingPrevious = {\n      message,\n      remainder: this.tickParts,\n      interval: null,\n    };\n\n    this.tickingPrevious.remainder -= 1;\n\n    this.tickingPrevious.interval = setInterval(() => {\n      if (this.tickingPrevious.remainder === 1) {\n        clearInterval(this.tickingPrevious.interval);\n        return;\n      }\n\n      this.bar.tick({\n        task: message,\n      });\n      this.tickingPrevious.remainder -= 1;\n    }, 200);\n  }\n}\n\nexport default DishonestProgress;\n"]}