{"version":3,"sources":["helpers/iconShellHelpers.js"],"names":["isWindows","helpers","isOSX","tmp","setGracefulCleanup","SCRIPT_PATHS","singleIco","path","join","__dirname","convertToPng","convertToIco","convertToIcns","iconShellHelper","shellScriptPath","icoSrc","dest","Promise","resolve","reject","Error","shell","exec","silent","exitCode","stdOut","stdError","getTmpDirPath","tempIconDirObj","dirSync","unsafeCleanup","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,S,GAAqBC,iB,CAArBD,S;IAAWE,K,GAAUD,iB,CAAVC,K;;;AAEnBC,cAAIC,kBAAJ;;AAEA,IAAMC,eAAe;AACnBC,aAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,eAA9B,CADQ;AAEnBC,gBAAcH,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAFK;AAGnBE,gBAAcJ,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAHK;AAInBG,iBAAeL,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,mBAA9B;AAJI,CAArB;;AAOA;;;;;;AAMA,SAASI,eAAT,CAAyBC,eAAzB,EAA0CC,MAA1C,EAAkDC,IAAlD,EAAwD;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAInB,WAAJ,EAAiB;AACfmB,aAAO,IAAIC,KAAJ,CAAU,0BAAV,CAAP;AACA;AACD;;AAEDC,sBAAMC,IAAN,CACG,GAAER,eAAgB,IAAGC,MAAO,IAAGC,IAAK,EADvC,EAEE,EAAEO,QAAQ,IAAV,EAFF,EAGE,UAACC,QAAD,EAAWC,MAAX,EAAmBC,QAAnB,EAAgC;AAC9B,UAAIF,QAAJ,EAAc;AACZ;AACAL,eAAO;AACLM,gBADK;AAELC;AAFK,SAAP;AAIA;AACD;;AAEDR,cAAQF,IAAR;AACD,KAdH;AAgBD,GAtBM,CAAP;AAuBD;;AAED,SAASW,aAAT,GAAyB;AACvB,MAAMC,iBAAiBzB,cAAI0B,OAAJ,CAAY,EAAEC,eAAe,IAAjB,EAAZ,CAAvB;AACA,SAAOF,eAAeG,IAAtB;AACD;;AAED;;;;;;AAMA,SAASzB,SAAT,CAAmBS,MAAnB,EAA2B;AACzB,SAAOF,gBACLR,aAAaC,SADR,EAELS,MAFK,EAGJ,GAAEY,eAAgB,WAHd,CAAP;AAKD;;AAED,SAASjB,YAAT,CAAsBK,MAAtB,EAA8B;AAC5B,SAAOF,gBACLR,aAAaK,YADR,EAELK,MAFK,EAGJ,GAAEY,eAAgB,WAHd,CAAP;AAKD;;AAED,SAAShB,YAAT,CAAsBI,MAAtB,EAA8B;AAC5B,SAAOF,gBACLR,aAAaM,YADR,EAELI,MAFK,EAGJ,GAAEY,eAAgB,WAHd,CAAP;AAKD;;AAED,SAASf,aAAT,CAAuBG,MAAvB,EAA+B;AAC7B,MAAI,CAACb,OAAL,EAAc;AACZ,WAAO,IAAIe,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,aACjBA,OAAO,IAAIC,KAAJ,CAAU,4CAAV,CAAP,CADiB;AAAA,KAAZ,CAAP;AAGD;AACD,SAAOP,gBACLR,aAAaO,aADR,EAELG,MAFK,EAGJ,GAAEY,eAAgB,YAHd,CAAP;AAKD;;kBAEc;AACbrB,WADa;AAEbI,cAFa;AAGbC,cAHa;AAIbC;AAJa,C","file":"iconShellHelpers.js","sourcesContent":["import shell from 'shelljs';\nimport path from 'path';\nimport tmp from 'tmp';\nimport helpers from './helpers';\n\nconst { isWindows, isOSX } = helpers;\n\ntmp.setGracefulCleanup();\n\nconst SCRIPT_PATHS = {\n  singleIco: path.join(__dirname, '../..', 'bin/singleIco'),\n  convertToPng: path.join(__dirname, '../..', 'bin/convertToPng'),\n  convertToIco: path.join(__dirname, '../..', 'bin/convertToIco'),\n  convertToIcns: path.join(__dirname, '../..', 'bin/convertToIcns'),\n};\n\n/**\n * Executes a shell script with the form \"./pathToScript param1 param2\"\n * @param {string} shellScriptPath\n * @param {string} icoSrc input .ico\n * @param {string} dest has to be a .ico path\n */\nfunction iconShellHelper(shellScriptPath, icoSrc, dest) {\n  return new Promise((resolve, reject) => {\n    if (isWindows()) {\n      reject(new Error('OSX or Linux is required'));\n      return;\n    }\n\n    shell.exec(\n      `${shellScriptPath} ${icoSrc} ${dest}`,\n      { silent: true },\n      (exitCode, stdOut, stdError) => {\n        if (exitCode) {\n          // eslint-disable-next-line prefer-promise-reject-errors\n          reject({\n            stdOut,\n            stdError,\n          });\n          return;\n        }\n\n        resolve(dest);\n      },\n    );\n  });\n}\n\nfunction getTmpDirPath() {\n  const tempIconDirObj = tmp.dirSync({ unsafeCleanup: true });\n  return tempIconDirObj.name;\n}\n\n/**\n * Converts the ico to a temporary directory which will be cleaned up on process exit\n * @param {string} icoSrc path to a .ico file\n * @return {Promise}\n */\n\nfunction singleIco(icoSrc) {\n  return iconShellHelper(\n    SCRIPT_PATHS.singleIco,\n    icoSrc,\n    `${getTmpDirPath()}/icon.ico`,\n  );\n}\n\nfunction convertToPng(icoSrc) {\n  return iconShellHelper(\n    SCRIPT_PATHS.convertToPng,\n    icoSrc,\n    `${getTmpDirPath()}/icon.png`,\n  );\n}\n\nfunction convertToIco(icoSrc) {\n  return iconShellHelper(\n    SCRIPT_PATHS.convertToIco,\n    icoSrc,\n    `${getTmpDirPath()}/icon.ico`,\n  );\n}\n\nfunction convertToIcns(icoSrc) {\n  if (!isOSX()) {\n    return new Promise((resolve, reject) =>\n      reject(new Error('OSX is required to convert to a .icns icon')),\n    );\n  }\n  return iconShellHelper(\n    SCRIPT_PATHS.convertToIcns,\n    icoSrc,\n    `${getTmpDirPath()}/icon.icns`,\n  );\n}\n\nexport default {\n  singleIco,\n  convertToPng,\n  convertToIco,\n  convertToIcns,\n};\n"]}