{"version":3,"sources":["infer/inferIcon.js"],"names":["downloadFile","helpers","allowedIconFormats","tmp","setGracefulCleanup","GITCLOUD_SPACE_DELIMITER","getMaxMatchScore","iconWithScores","reduce","maxScore","currentIcon","currentScore","score","getMatchingIcons","iconsWithScores","filter","item","map","Object","assign","ext","path","extname","url","mapIconWithMatchScore","fileIndex","targetUrl","normalisedTargetUrl","toLowerCase","itemWords","name","split","word","includes","inferIconFromStore","platform","allowedFormats","Set","then","iconsMatchingScore","iconsMatchingExt","icon","has","matchingIcon","iconUrl","writeFilePromise","outPath","data","Promise","resolve","reject","fs","writeFile","error","inferFromPage","outDir","preferredExt","outfilePath","join","inferIconFromUrlToPath","inferIcon","tmpObj","dirSync","unsafeCleanup","tmpPath"],"mappings":"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","file":"inferIcon.js","sourcesContent":["import pageIcon from 'page-icon';\nimport path from 'path';\nimport fs from 'fs';\nimport tmp from 'tmp';\nimport gitCloud from 'gitcloud';\nimport helpers from './../helpers/helpers';\n\nconst { downloadFile, allowedIconFormats } = helpers;\ntmp.setGracefulCleanup();\n\nconst GITCLOUD_SPACE_DELIMITER = '-';\n\nfunction getMaxMatchScore(iconWithScores) {\n  return iconWithScores.reduce((maxScore, currentIcon) => {\n    const currentScore = currentIcon.score;\n    if (currentScore > maxScore) {\n      return currentScore;\n    }\n    return maxScore;\n  }, 0);\n}\n\n/**\n * also maps ext to icon object\n */\nfunction getMatchingIcons(iconsWithScores, maxScore) {\n  return iconsWithScores\n    .filter((item) => item.score === maxScore)\n    .map((item) => Object.assign({}, item, { ext: path.extname(item.url) }));\n}\n\nfunction mapIconWithMatchScore(fileIndex, targetUrl) {\n  const normalisedTargetUrl = targetUrl.toLowerCase();\n  return fileIndex.map((item) => {\n    const itemWords = item.name.split(GITCLOUD_SPACE_DELIMITER);\n    const score = itemWords.reduce((currentScore, word) => {\n      if (normalisedTargetUrl.includes(word)) {\n        return currentScore + 1;\n      }\n      return currentScore;\n    }, 0);\n\n    return Object.assign({}, item, { score });\n  });\n}\n\nfunction inferIconFromStore(targetUrl, platform) {\n  const allowedFormats = new Set(allowedIconFormats(platform));\n\n  return gitCloud('https://jiahaog.github.io/nativefier-icons/').then(\n    (fileIndex) => {\n      const iconWithScores = mapIconWithMatchScore(fileIndex, targetUrl);\n      const maxScore = getMaxMatchScore(iconWithScores);\n\n      if (maxScore === 0) {\n        return null;\n      }\n\n      const iconsMatchingScore = getMatchingIcons(iconWithScores, maxScore);\n      const iconsMatchingExt = iconsMatchingScore.filter((icon) =>\n        allowedFormats.has(icon.ext),\n      );\n      const matchingIcon = iconsMatchingExt[0];\n      const iconUrl = matchingIcon && matchingIcon.url;\n\n      if (!iconUrl) {\n        return null;\n      }\n      return downloadFile(iconUrl);\n    },\n  );\n}\n\nfunction writeFilePromise(outPath, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(outPath, data, (error) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(outPath);\n    });\n  });\n}\n\nfunction inferFromPage(targetUrl, platform, outDir) {\n  let preferredExt = '.png';\n  if (platform === 'win32') {\n    preferredExt = '.ico';\n  }\n\n  // todo might want to pass list of preferences instead\n  return pageIcon(targetUrl, { ext: preferredExt }).then((icon) => {\n    if (!icon) {\n      return null;\n    }\n\n    const outfilePath = path.join(outDir, `/icon${icon.ext}`);\n    return writeFilePromise(outfilePath, icon.data);\n  });\n}\n\n/**\n *\n * @param {string} targetUrl\n * @param {string} platform\n * @param {string} outDir\n */\nfunction inferIconFromUrlToPath(targetUrl, platform, outDir) {\n  return inferIconFromStore(targetUrl, platform).then((icon) => {\n    if (!icon) {\n      return inferFromPage(targetUrl, platform, outDir);\n    }\n\n    const outfilePath = path.join(outDir, `/icon${icon.ext}`);\n    return writeFilePromise(outfilePath, icon.data);\n  });\n}\n\n/**\n * @param {string} targetUrl\n * @param {string} platform\n */\nfunction inferIcon(targetUrl, platform) {\n  const tmpObj = tmp.dirSync({ unsafeCleanup: true });\n  const tmpPath = tmpObj.name;\n  return inferIconFromUrlToPath(targetUrl, platform, tmpPath);\n}\n\nexport default inferIcon;\n"]}