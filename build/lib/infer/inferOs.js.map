{"version":3,"sources":["infer/inferOs.js"],"names":["inferPlatform","platform","os","Error","inferArch","arch"],"mappings":";;;;;;AAAA;;;;;;AAEA,SAASA,aAAT,GAAyB;AACvB,MAAMC,WAAWC,aAAGD,QAAH,EAAjB;AACA,MACEA,aAAa,QAAb,IACAA,aAAa,KADb,IAEAA,aAAa,OAFb,IAGAA,aAAa,OAJf,EAKE;AACA,WAAOA,QAAP;AACD;;AAED,QAAM,IAAIE,KAAJ,CAAW,qBAAoBF,QAAS,WAAxC,CAAN;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,MAAMC,OAAOH,aAAGG,IAAH,EAAb;AACA,MAAIA,SAAS,MAAT,IAAmBA,SAAS,KAA5B,IAAqCA,SAAS,KAAlD,EAAyD;AACvD,UAAM,IAAIF,KAAJ,CAAW,6BAA4BE,IAAK,WAA5C,CAAN;AACD;AACD,SAAOA,IAAP;AACD;;kBAEc;AACbL,eADa;AAEbI;AAFa,C","file":"inferOs.js","sourcesContent":["import os from 'os';\n\nfunction inferPlatform() {\n  const platform = os.platform();\n  if (\n    platform === 'darwin' ||\n    platform === 'mas' ||\n    platform === 'win32' ||\n    platform === 'linux'\n  ) {\n    return platform;\n  }\n\n  throw new Error(`Untested platform ${platform} detected`);\n}\n\nfunction inferArch() {\n  const arch = os.arch();\n  if (arch !== 'ia32' && arch !== 'x64' && arch !== 'arm') {\n    throw new Error(`Incompatible architecture ${arch} detected`);\n  }\n  return arch;\n}\n\nexport default {\n  inferPlatform,\n  inferArch,\n};\n"]}