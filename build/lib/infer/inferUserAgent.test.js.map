{"version":3,"sources":["infer/inferUserAgent.test.js"],"names":["TEST_RESULT","darwin","mas","win32","linux","testPlatform","platform","expect","resolves","toBe","describe","test","testPromises","_","keys","map","Promise","all","jest","setTimeout","TIMEOUT_URL"],"mappings":";;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,cAAc;AAClBC,UACE,0HAFgB;AAGlBC,OACE,0HAJgB;AAKlBC,SACE,oHANgB;AAOlBC,SACE;AARgB,CAApB;;AAWA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,SAAOC,OAAO,8BAAe,QAAf,EAAyBD,QAAzB,CAAP,EAA2CE,QAA3C,CAAoDC,IAApD,CACLT,YAAYM,QAAZ,CADK,CAAP;AAGD;;AAEDI,SAAS,kBAAT,EAA6B,YAAM;AACjCC,OAAK,uCAAL,0DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,wBADsC,GACvBC,iBAClBC,IADkB,CACbd,WADa,EAElBe,GAFkB,CAEd,UAACT,QAAD;AAAA,qBAAcD,aAAaC,QAAb,CAAd;AAAA,aAFc,CADuB;AAAA;AAAA,mBAItCU,QAAQC,GAAR,CAAYL,YAAZ,CAJsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAOAD,OAAK,8CAAL,0DAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AACnDO,iBAAKC,UAAL,CAAgB,IAAhB;;AAEMC,uBAH6C,GAG/B,2BAH+B;AAAA;AAAA,mBAI7Cb,OAAO,8BAAe,OAAf,EAAwB,QAAxB,EAAkCa,WAAlC,CAAP,EAAuDZ,QAAvD,CAAgEC,IAAhE,CACJ,2HADI,CAJ6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD;AAQD,CAhBD","file":"inferUserAgent.test.js","sourcesContent":["import _ from 'lodash';\nimport inferUserAgent from './inferUserAgent';\n\nconst TEST_RESULT = {\n  darwin:\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36',\n  mas:\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36',\n  win32:\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36',\n  linux:\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36',\n};\n\nfunction testPlatform(platform) {\n  return expect(inferUserAgent('0.37.1', platform)).resolves.toBe(\n    TEST_RESULT[platform],\n  );\n}\n\ndescribe('Infer User Agent', () => {\n  test('Can infer userAgent for all platforms', async () => {\n    const testPromises = _\n      .keys(TEST_RESULT)\n      .map((platform) => testPlatform(platform));\n    await Promise.all(testPromises);\n  });\n\n  test('Connection error will still get a user agent', async () => {\n    jest.setTimeout(6000);\n\n    const TIMEOUT_URL = 'http://www.google.com:81/';\n    await expect(inferUserAgent('1.6.7', 'darwin', TIMEOUT_URL)).resolves.toBe(\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',\n    );\n  });\n});\n"]}